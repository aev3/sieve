################################################################################
#
# If you create a file in your repository named .gitignore git will use its
# rules when looking at files to commit. Note that git will not ignore a file
# that was already tracked before a rule was added to this file to ignore it. In
# such a case the file must be un-tracked, usually with the following command:
# `git rm --cached filename`
#
# This file can be committed into the repository, thus sharing the rule list
# with any other users that clone the repository.
#
# Note that you can create a .gitignore in any subpath to have its rules applied
# at that path. Sometimes an empty .gitignore file is used as a placeholder for
# an empty path, for example to force git to generate a log/ path for your
# development environment to use.
#
# GitHub maintains an official list of recommended .gitignore files at this
# public repository:
# https://github.com/github/gitignore
#
################################################################################

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.ear
*.gz
*.iso
*.jar
*.rar
*.tar
*.war
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Caches #
######################
.cache

# From Scala.gitignore #
######################
# sbt specific
dist/*
target/
lib_managed/
src_managed/
project/boot/
project/plugins/project/

# Scala-IDE specific
.scala_dependencies
# Scala worksheets
*.sc
.worksheet

# GO specific

